<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ElectroMania - Add Product</title>
  <link href="https://fonts.googleapis.com/css2?family=Bellefair&family=Outfit:wght@400;500;700&display=swap" rel="stylesheet">
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <!-- Bootstrap Icons -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <!-- Cropper.js CSS -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
  <!-- Custom CSS (Embedded) -->
  <style>
    /* Reset and Base Styles */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Outfit', sans-serif;
      background: #f5f7fa;
      min-height: 100vh;
      display: flex;
      overflow-x: hidden;
    }

    /* Navbar */
    .navbar {
      background: white;
      padding: 15px 30px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      z-index: 1000;
    }

    .brand-name {
      font-family: 'Bellefair', serif;
      font-size: 28px;
      font-weight: normal;
      text-decoration: none;
      color: #192430;
    }

    .nav-right {
      display: flex;
      align-items: center;
      gap: 20px;
    }

    .nav-right .search-container {
      position: relative;
    }

    .nav-right input {
      padding: 8px 15px 8px 35px;
      border: 1px solid #e0e0e0;
      border-radius: 20px;
      width: 200px;
      font-size: 14px;
      background: #f5f5f5;
    }

    .nav-right .search-icon {
      position: absolute;
      left: 10px;
      top: 50%;
      transform: translateY(-50%);
      color: #666;
      font-size: 16px;
    }

    .nav-right .new-btn {
      background: #3b6da1;
      color: white;
      padding: 8px 15px;
      border: none;
      border-radius: 4px;
      font-size: 14px;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    .nav-right .new-btn:hover {
      background: #2d5480;
    }

    .nav-right .filter-btn {
      color: #666;
      font-size: 18px;
      cursor: pointer;
    }

    .nav-right a.profile-icon {
      color: #666;
      font-size: 24px;
      text-decoration: none;
      transition: color 0.3s ease;
    }

    .nav-right a.profile-icon:hover {
      color: #28517D;
    }

    /* Sidebar */
    .sidebar {
      width: 250px;
      background: #f9f9f9;
      padding: 20px 0;
      position: fixed;
      top: 60px;
      bottom: 0;
      left: 0;
      z-index: 999;
      overflow-y: auto;
    }

    .sidebar a {
      display: flex;
      align-items: center;
      padding: 15px 30px;
      color: #192430;
      text-decoration: none;
      font-size: 16px;
      transition: background 0.3s ease;
      position: relative;
      border-radius: 15px;
      cursor: pointer;
    }

    .sidebar a i {
      margin-right: 15px;
      font-size: 18px;
    }

    .sidebar a.active {
      background: #3b6da1;
      color: white;
    }

    .sidebar a:hover {
      background: #d9dbdd;
    }

    /* Main Content */
    .main-content {
      margin-left: 250px;
      padding: 80px 30px 30px;
      flex: 1;
    }

    .dashboard-title {
      font-size: 24px;
      color: #192430;
      margin-bottom: 20px;
    }

    /* Form Styles */
    .add-product-form {
      background: white;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .form-label {
      font-weight: 600;
      color: #192430;
    }

    .form-control,
    .form-select {
      border-radius: 4px;
      font-size: 14px;
    }

    .error-message {
      font-size: 0.8em;
      color: #ff0101;
    }

    /* Image Upload */
    .image-upload-row {
      display: flex;
      gap: 15px;
      flex-wrap: wrap;
    }

    .image-upload-slot {
      position: relative;
      width: 100px;
      height: 100px;
    }

    .image-upload-dropzone {
      width: 100%;
      height: 100%;
      border: 2px dashed #e0e0e0;
      border-radius: 8px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      cursor: pointer;
    }

    .image-upload-dropzone i {
      font-size: 24px;
      color: #666;
    }

    .image-upload-dropzone p {
      font-size: 12px;
      color: #666;
      margin: 0;
    }

    .image-preview {
      display: none;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }

    .image-preview img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      border-radius: 8px;
    }

    .image-preview .remove-image-btn {
      position: absolute;
      top: -10px;
      right: -10px;
      background: #ff0101;
      color: white;
      border: none;
      border-radius: 50%;
      width: 20px;
      height: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
    }

    .image-upload-slot.filled .image-upload-dropzone {
      display: none;
    }

    .image-upload-slot.filled .image-preview {
      display: block;
    }

    .image-upload-dropzone.dragover {
      border-color: #3b6da1;
      background: #f5f5f5;
    }

    /* Variant Section */
    .variant-container {
      max-height: 300px;
      overflow-y: auto;
    }

    .variant-item {
      background: #f9f9f9;
      border-radius: 8px;
    }

    .remove-variant {
      background: none;
      border: none;
      color: #ff0101;
      font-size: 16px;
      cursor: pointer;
    }

    .remove-variant:disabled {
      color: #ccc;
      cursor: not-allowed;
    }

    /* Buttons */
    .btn-primary {
      background: #3b6da1;
      border: none;
      transition: background 0.3s ease;
    }

    .btn-primary:hover {
      background: #2d5480;
    }

    .btn-outline-primary {
      color: #3b6da1;
      border-color: #3b6da1;
    }

    .btn-outline-primary:hover {
      background: #3b6da1;
      color: white;
    }

    /* Modal Styles */
    .modal-header {
      background-color: #3e29a8;
      color: white;
      height: 50px;
    }

    .modal-title {
      font-weight: bold;
    }

    /* Responsive Design */
    @media (max-width: 1024px) {
      .sidebar {
        width: 200px;
      }

      .main-content {
        margin-left: 200px;
      }

      .nav-right input {
        width: 150px;
      }
    }

    @media (max-width: 768px) {
      .sidebar {
        width: 100%;
        position: static;
        top: auto;
        padding: 10px 0;
      }

      .main-content {
        margin-left: 0;
        padding: 20px;
      }

      .navbar {
        padding: 10px 20px;
      }

      .brand-name {
        font-size: 24px;
      }

      .nav-right {
        gap: 15px;
      }

      .nav-right input {
        width: 120px;
        padding: 6px 12px 6px 30px;
      }

      .nav-right .new-btn {
        padding: 6px 12px;
        font-size: 12px;
      }
    }

    @media (max-width: 480px) {
      .navbar {
        flex-direction: column;
        align-items: flex-start;
        padding: 10px 15px;
        height: auto;
      }

      .brand-name {
        margin-bottom: 10px;
      }

      .nav-right {
        width: 100%;
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
      }

      .nav-right input {
        width: 100%;
        margin-bottom: 10px;
      }

      .nav-right .new-btn {
        width: 100%;
      }
    }
  </style>
</head>

<body class="bg-light">
  <!-- Navbar -->
  <nav class="navbar">
    <a href="/admin" class="brand-name">ElectroMania</a>
  </nav>

  <!-- Sidebar + Main Content -->
  <div class="container-fluid w-100">
    <div class="row g-0">
      <!-- Sidebar -->
      <nav class="sidebar">
        <a href="/admin/dashboard"><i class="bi bi-grid"></i> Dashboard</a>
        <a href="/admin/categories"><i class="bi bi-tag"></i> Categories</a>
        <a href="/admin/products" class="active"><i class="bi bi-box"></i> Products</a>
        <a href="/admin/customers"><i class="bi bi-people"></i> Customers</a>
        <a href="/admin/orders"><i class="bi bi-cart"></i> Orders</a>
        <a href="/admin/coupons"><i class="bi bi-ticket"></i> Coupons</a>
        <a href="/admin/sales-report"><i class="bi bi-bar-chart"></i> Sales Report</a>
        <a href="/admin/logout"><i class="bi bi-box-arrow-right"></i> Sign Out</a>
      </nav>

      <!-- Main Content -->
      <main class="main-content">
        <h3 class="dashboard-title">Add New Product</h3>

        <!-- Product Form -->
        <div class="card add-product-form">
          <div class="card-body p-4">
            <form id="addProductForm" enctype="multipart/form-data">
              <div class="mb-4 d-flex gap-3">
                <div class="w-100">
                  <label for="productName" class="form-label">Product Name</label>
                  <input
                    type="text"
                    class="form-control form-control-sm"
                    id="productName"
                    name="productName"
                    placeholder="Enter product name"
                  />
                  <div id="nameError" class="error-message"></div>
                </div>
                <div class="w-100">
                  <label for="productCategory" class="form-label mb-2">Category</label>
                  <select
                    class="form-select form-select-sm"
                    id="productCategory"
                    name="productCategory"
                  >
                    <option hidden>Select category</option>
                    <% category.forEach(category => { %>
                    <option value="<%= category.name %>">
                      <%= category.name %>
                    </option>
                    <% }) %>
                  </select>
                  <div id="categoryError" class="error-message"></div>
                </div>
              </div>

              <div class="mb-4 d-flex gap-3">
                <div class="w-100">
                  <label for="brand" class="form-label">Brand</label>
                  <input
                    type="text"
                    class="form-control form-control-sm"
                    id="brand"
                    name="productBrand"
                    placeholder="Enter brand"
                  />
                  <div id="brandError" class="error-message"></div>
                </div>
                <div class="w-100">
                  <label for="basePrice" class="form-label"> Price</label>
                  <input
                    type="number"
                    id="productPrice"
                    name="productPrice"
                    class="form-control form-control-sm"
                    placeholder="Enter price"
                  />
                  <div id="priceError" class="error-message"></div>
                </div>
                <div class="w-100">
                  <label for="discountPrice" class="form-label">Discount Percentage (%)</label>
                  <input
                    type="number"
                    id="productOffer"
                    name="productOffer"
                    class="form-control form-control-sm"
                    placeholder="Enter discount"
                  />
                </div>
              </div>

              <div class="mb-4 d-flex gap-3">
                <div class="w-100">
                  <label for="shortDescription" class="form-label"> Description</label>
                  <textarea
                    class="form-control"
                    id="productDescription"
                    name="productDescription"
                    placeholder="Enter short description"
                  ></textarea>
                  <div id="descriptionError" class="error-message"></div>
                </div>
                <div class="w-100">
                  <label for="basePrice" class="form-label">Stock</label>
                  <input
                    type="number"
                    id="productStock"
                    name="productStock"
                    class="form-control form-control-sm"
                    placeholder="eg.10"
                  />
                  <div id="stockError" class="error-message"></div>
                </div>
              </div>

              

              <!-- Single Image Section -->
              <div class="mb-4">
                <label class="form-label">Product Images</label>
                <div class="image-upload-row">
                  <div class="image-upload-slot" data-slot="1">
                    <div class="image-upload-dropzone">
                      <i class="fa-solid fa-upload"></i>
                      <p class="mb-0">Add Image</p>
                      <input
                        type="file"
                        class="d-none"
                        name="productImages[]"
                        accept="image/*"
                      />
                    </div>
                    <div class="image-preview"></div>
                  </div>
                  <div class="image-upload-slot" data-slot="2">
                    <div class="image-upload-dropzone">
                      <i class="fa-solid fa-upload"></i>
                      <p class="mb-0">Add Image</p>
                      <input
                        type="file"
                        class="d-none"
                        name="productImages[]"
                        accept="image/*"
                      />
                    </div>
                    <div class="image-preview"></div>
                  </div>
                  <div class="image-upload-slot" data-slot="3">
                    <div class="image-upload-dropzone">
                      <i class="fa-solid fa-upload"></i>
                      <p class="mb-0">Add Image</p>
                      <input
                        type="file"
                        class="d-none"
                        name="productImages[]"
                        accept="image/*"
                      />
                    </div>
                    <div class="image-preview"></div>
                  </div>
                  <div class="image-upload-slot" data-slot="4">
                    <div class="image-upload-dropzone">
                      <i class="fa-solid fa-upload"></i>
                      <p class="mb-0">Add Image</p>
                      <input
                        type="file"
                        class="d-none"
                        name="productImages[]"
                        accept="image/*"
                      />
                    </div>
                    <div class="image-preview"></div>
                  </div>
                </div>
                <div id="imageError" class="text-center error-message"></div>
              </div>

              <!-- Variant Section -->
              <div class="mb-4">
                <div class="d-flex w-40 justify-content-between mt-3">
                  <div class="d-flex gap-3">
                    <a class="btn btn-outline-primary" href="/admin/products">Cancel</a>
                    <button type="submit" class="btn btn-primary">Add Product</button>
                  </div>
                </div>
              </div>
            </form>
          </div>
        </div>
      </main>
    </div>
  </div>

  <!-- Cropping Modal -->
  <div class="modal fade" id="cropModal" tabindex="-1" aria-labelledby="cropModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
      <div class="modal-content border-0 shadow-lg">
        <div class="modal-header bg-primary text-white">
          <h5 class="modal-title fw-bold" id="cropModalLabel">Crop Your Image</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body p-4">
          <div class="img-container rounded overflow-hidden bg-light">
            <img id="imageToCrop" src="" alt="Image to crop" class="img-fluid" style="max-height: 500px; object-fit: contain" />
          </div>
        </div>
        <div class="modal-footer border-0">
          <button type="button" class="btn btn-outline-secondary px-4 py-2" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary px-4 py-2 fw-semibold" id="cropButton">Crop & Save</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
  <!-- SweetAlert -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <!-- Cropper.js -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
  <script>
    const createElement = (tag, attributes = {}, children = []) => {
      const element = document.createElement(tag);
      Object.assign(element, attributes);
      children.forEach((child) => element.appendChild(child));
      return element;
    };

    document.addEventListener("DOMContentLoaded", () => {
      setupFormSubmission();
      setupVariantManagement();
      // setupInitialVariants();
      setupImageUploads(document.querySelector(".image-upload-row"));

      // Sidebar active state
      const sidebarLinks = document.querySelectorAll('.sidebar a');
      sidebarLinks.forEach(link => {
        link.addEventListener('click', function () {
          sidebarLinks.forEach(l => l.classList.remove('active'));
          this.classList.add('active');
        });
      });

      const currentPath = window.location.pathname;
      sidebarLinks.forEach(link => {
        if (link.getAttribute('href') === currentPath) {
          link.classList.add('active');
        }
      });
    });

    function setupFormSubmission() {
      const form = document.getElementById("addProductForm");
      if (!form) return;

      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        const name = document.getElementById("productName").value.trim();
        const brand = document.getElementById("brand").value.trim();
        const category = document.getElementById("productCategory").value.trim();
        const description = document.getElementById("productDescription").value.trim();
        const stock = document.getElementById("productStock").value.trim()
        const price = document.getElementById("productPrice").value.trim();
        const imageInputs = document.querySelectorAll('input[name="productImages[]"]');
       const letterRegex = /^[A-Za-z\s]+$/;

        const errors = {
          name: document.getElementById("nameError"),
          brand: document.getElementById("brandError"),
          category: document.getElementById("categoryError"),
          description: document.getElementById("descriptionError"),
          stock: document.getElementById("stockError"),
          price: document.getElementById("priceError"),
          image: document.getElementById("imageError"),
        };

        // Clear previous errors
        Object.values(errors).forEach((el) => (el.innerText = ""));
        document.querySelectorAll(".variant-item .error-message").forEach((el) => (el.innerText = ""));

        let hasError = false;

        if (!name) {
          errors.name.innerText = "Product name is required";
          hasError = true;
        } else if (name.length < 2) {
          errors.name.innerText = "Product name must be at least 2 characters";
          hasError = true;
        }else if (!letterRegex.test(name)){
          errors.name.innerText = "Product name can only contain letters and numbers";
          hasError = true
        }

        if (!brand) {
          errors.brand.innerText = "Brand is required";
          hasError = true;
        }else if (!letterRegex.test(brand)){
          errors.brand.innerText = "Brand name can only contain letters or numbers"
          hasError = true
        }

        if (!category || category === "Select category") {
          errors.category.innerText = "Please select a category";
          hasError = true;
        }

        if (!description) {
          errors.description.innerText = "Description is required";
          hasError = true;
        } else if (description.length < 10) {
          errors.description.innerText = "Description must be at least 10 characters";
          hasError = true;
        } else if (!letterRegex.test(description)){
          errors.description.innerText = "Desctription can only contain letters and numbers."
          hasError = true
        }

        if(!stock){
          errors.stock.innerText = "Stock is required";
          hasError = true;
        }else if(stock < 1){
          error.stock.innerText = "Stock can't be zero or negative value"
          hasError = true
        }

        if (!price) {
          errors.price.innerText = "Price is required";
          hasError = true;
        } else if (parseFloat(price) <= 0) {
          errors.price.innerText = "Price must be greater than 0";
          hasError = true;
        }

       

        let totalImages = 0;
        imageInputs.forEach((input) => {
          totalImages += input.files.length;
        });

        if (totalImages < 3) {
          errors.image.innerText = "At least 3 product images are required";
          hasError = true;
        }

     

        if (hasError) return;

        const formData = new FormData(form);

        try {
          const response = await fetch("/admin/addProducts", {
            method: "POST",
            body: formData,
          });
          const result = await response.json();

          if (response.ok) {
            Swal.fire({
              position: "top-center",
              icon: "success",
              text: "Product added successfully!",
              showConfirmButton: false,
              timer: 2000,
            }).then(() => {
              window.location.href = "/admin/products";
            });
          } else {
            Swal.fire({
              icon: "error",
              text: result.error || "An unexpected error occurred.",
            });
          }
        } catch (error) {
          console.error("Error:", error);
          Swal.fire({
            icon: "error",
            text: "Something went wrong. Please try again.",
          });
        }
      });
    }

    function setupVariantManagement() {
      const container = document.getElementById("variantContainer");
      const addButton = document.getElementById("addVariantButton");
      if (!container || !addButton) return;

      addButton.addEventListener("click", () => {
        const variantIndex = container.children.length;
        const variant = createVariant(variantIndex);
        container.appendChild(variant);
        updateRemoveButtons(container);
      });

      container.addEventListener("click", (e) => {
        const removeBtn = e.target.closest(".remove-variant");
        if (removeBtn) {
          removeBtn.closest(".variant-item").remove();
          updateRemoveButtons(container);
        }
      });
    }

   
    function updateRemoveButtons(container) {
      const buttons = container.querySelectorAll(".remove-variant");
      buttons.forEach((btn) => (btn.disabled = buttons.length <= 1));
    }


    function setupImageUploads(container) {
      if (!container) return;

      const slots = container.querySelectorAll(".image-upload-slot");
      slots.forEach((slot) => {
        const dropzone = slot.querySelector(".image-upload-dropzone");
        const input = slot.querySelector("input[type='file']");
        const preview = slot.querySelector(".image-preview");

        dropzone.addEventListener("click", () => input.click());

        dropzone.addEventListener("dragover", (e) => {
          e.preventDefault();
          dropzone.classList.add("dragover");
        });

        dropzone.addEventListener("dragleave", () => {
          dropzone.classList.remove("dragover");
        });

        dropzone.addEventListener("drop", (e) => {
          e.preventDefault();
          dropzone.classList.remove("dragover");
          const file = e.dataTransfer.files[0];
          if (file && file.type.startsWith("image/")) {
            handleImageUpload(file, input, preview);
          }
        });

        input.addEventListener("change", () => {
          const file = input.files[0];
          if (file && file.type.startsWith("image/")) {
            handleImageUpload(file, input, preview);
          }
        });
      });
    }

    function handleImageUpload(file, input, preview) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const image = document.getElementById("imageToCrop");
        image.src = e.target.result;

        const modal = new bootstrap.Modal(document.getElementById("cropModal"));
        modal.show();

        document.getElementById("cropModal").addEventListener(
          "shown.bs.modal",
          () => {
            const cropper = new Cropper(image, {
              aspectRatio: 1,
              viewMode: 1,
              autoCropArea: 0.9,
              responsive: true,
              restore: true,
              dragMode: "move",
            });

            document.getElementById("cropButton").onclick = () => {
              const canvas = cropper.getCroppedCanvas({
                width: 500,
                height: 500,
              });
              canvas.toBlob(
                (blob) => {
                  const croppedFile = new File([blob], file.name, {
                    type: "image/jpeg",
                  });
                  const dataTransfer = new DataTransfer();
                  dataTransfer.items.add(croppedFile);
                  input.files = dataTransfer.files;

                  const previewReader = new FileReader();
                  previewReader.onload = (e) => {
                    preview.innerHTML = `
                      <img src="${e.target.result}" alt="Preview" class="img-fluid">
                      <button type="button" class="remove-image-btn">×</button>
                    `;
                    preview.parentElement.classList.add("filled");

                    const removeBtn = preview.querySelector(".remove-image-btn");
                    removeBtn.addEventListener("click", () => {
                      preview.innerHTML = "";
                      preview.parentElement.classList.remove("filled");
                      input.value = "";
                    });
                  };
                  previewReader.readAsDataURL(croppedFile);

                  modal.hide();
                  cropper.destroy();
                },
                "image/jpeg",
                0.9
              );
            };
          },
          { once: true }
        );
      };
      reader.readAsDataURL(file);
    }
  </script>
</body>
</html>