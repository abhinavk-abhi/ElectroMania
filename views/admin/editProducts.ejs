<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ElectroMania - Edit Product</title>
  <link href="https://fonts.googleapis.com/css2?family=Bellefair&family=Outfit:wght@400;500;700&display=swap" rel="stylesheet">
 <!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

<!-- Bootstrap Bundle (includes Popper.js) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <!-- Bootstrap Icons -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <!-- Cropper.js CSS -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>

     <!-- SweetAlert2 -->
     <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    /* Reset and Base Styles */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Outfit', sans-serif;
      background: #f5f7fa;
      min-height: 100vh;
      display: flex;
      overflow-x: hidden;
    }

    /* Navbar */
    .navbar {
      background: white;
      padding: 15px 30px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      z-index: 1000;
    }

    .brand-name {
      font-family: 'Bellefair', serif;
      font-size: 28px;
      font-weight: normal;
      text-decoration: none;
      color: #192430;
    }

    .nav-right {
      display: flex;
      align-items: center;
      gap: 20px;
    }

    .nav-right .search-container {
      position: relative;
    }

    .nav-right input {
      padding: 8px 15px 8px 35px;
      border: 1px solid #e0e0e0;
      border-radius: 20px;
      width: 200px;
      font-size: 14px;
      background: #f5f5f5;
    }

    .nav-right .search-icon {
      position: absolute;
      left: 10px;
      top: 50%;
      transform: translateY(-50%);
      color: #666;
      font-size: 16px;
    }

    .nav-right .new-btn {
      background: #3b6da1;
      color: white;
      padding: 8px 15px;
      border: none;
      border-radius: 4px;
      font-size: 14px;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    .nav-right .new-btn:hover {
      background: #2d5480;
    }

    .nav-right .filter-btn {
      color: #666;
      font-size: 18px;
      cursor: pointer;
    }

    .nav-right a.profile-icon {
      color: #666;
      font-size: 24px;
      text-decoration: none;
      transition: color 0.3s ease;
    }

    .nav-right a.profile-icon:hover {
      color: #28517D;
    }

    /* Sidebar */
    .sidebar {
      width: 250px;
      background: #f9f9f9;
      padding: 20px 0;
      position: fixed;
      top: 60px;
      bottom: 0;
      left: 0;
      z-index: 999;
      overflow-y: auto;
    }

    .sidebar a {
      display: flex;
      align-items: center;
      padding: 15px 30px;
      color: #192430;
      text-decoration: none;
      font-size: 16px;
      transition: background 0.3s ease;
      position: relative;
      border-radius: 15px;
      cursor: pointer;
    }

    .sidebar a i {
      margin-right: 15px;
      font-size: 18px;
    }

    .sidebar a.active {
      background: #3b6da1;
      color: white;
    }

    .sidebar a:hover {
      background: #d9dbdd;
    }

    /* Main Content */
    .main-content {
      margin-left: 250px;
      padding: 80px 30px 30px;
      flex: 1;
    }

    .dashboard-title {
      font-size: 24px;
      color: #192430;
      margin-bottom: 20px;
    }

    /* Form Styles */
    .add-product-form {
      background: white;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .form-label {
      font-weight: 600;
      color: #192430;
    }

    .form-control,
    .form-select {
      border-radius: 4px;
      font-size: 14px;
    }

    .error-message {
      font-size: 0.8em;
      color: #ff0101;
    }

    /* Image Upload */
    .image-upload-row {
      display: flex;
      gap: 15px;
      flex-wrap: wrap;
    }

    .image-upload-slot {
      position: relative;
      width: 100px;
      height: 100px;
    }

    .image-upload-dropzone {
      width: 100%;
      height: 100%;
      border: 2px dashed #e0e0e0;
      border-radius: 8px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      cursor: pointer;
    }

    .image-upload-dropzone i {
      font-size: 24px;
      color: #666;
    }

    .image-upload-dropzone p {
      font-size: 12px;
      color: #666;
      margin: 0;
    }

    .image-preview {
      display: none;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }

    .image-preview img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      border-radius: 8px;
    }

    .image-preview .remove-image-btn {
      position: absolute;
      top: -10px;
      right: -10px;
      background: #ff0101;
      color: white;
      border: none;
      border-radius: 50%;
      width: 20px;
      height: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
    }

    .image-upload-slot.filled .image-upload-dropzone {
      display: none;
    }

    .image-upload-slot.filled .image-preview {
      display: block;
    }

    .image-upload-dropzone.dragover {
      border-color: #3b6da1;
      background: #f5f5f5;
    }

    /* Variant Section */
    .variant-container {
      max-height: 300px;
      overflow-y: auto;
    }

    .variant-item {
      background: #f9f9f9;
      border-radius: 8px;
    }

    .remove-variant {
      background: none;
      border: none;
      color: #ff0101;
      font-size: 16px;
      cursor: pointer;
    }

    .remove-variant:disabled {
      color: #ccc;
      cursor: not-allowed;
    }

    /* Buttons */
    .btn-primary {
      background: #3b6da1;
      border: none;
      transition: background 0.3s ease;
    }

    .btn-primary:hover {
      background: #2d5480;
    }

    .btn-outline-primary {
      color: #3b6da1;
      border-color: #3b6da1;
    }

    .btn-outline-primary:hover {
      background: #3b6da1;
      color: white;
    }

    /* Modal Styles */
    .modal-header {
      background-color: #3e29a8;
      color: white;
      height: 50px;
    }

    .modal-title {
      font-weight: bold;
    }

    /* Responsive Design */
    @media (max-width: 1024px) {
      .sidebar {
        width: 200px;
      }

      .main-content {
        margin-left: 200px;
      }

      .nav-right input {
        width: 150px;
      }
    }

    @media (max-width: 768px) {
      .sidebar {
        width: 100%;
        position: static;
        top: auto;
        padding: 10px 0;
      }

      .main-content {
        margin-left: 0;
        padding: 20px;
      }

      .navbar {
        padding: 10px 20px;
      }

      .brand-name {
        font-size: 24px;
      }

      .nav-right {
        gap: 15px;
      }

      .nav-right input {
        width: 120px;
        padding: 6px 12px 6px 30px;
      }

      .nav-right .new-btn {
        padding: 6px 12px;
        font-size: 12px;
      }
    }

    @media (max-width: 480px) {
      .navbar {
        flex-direction: column;
        align-items: flex-start;
        padding: 10px 15px;
        height: auto;
      }

      .brand-name {
        margin-bottom: 10px;
      }

      .nav-right {
        width: 100%;
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
      }

      .nav-right input {
        width: 100%;
        margin-bottom: 10px;
      }

      .nav-right .new-btn {
        width: 100%;
      }
    }
  </style>
</head>

<body class="bg-light">
  <!-- Navbar -->
  <nav class="navbar">
    <a href="/admin" class="brand-name">ElectroMania</a>
  </nav>

  <!-- Sidebar + Main Content -->
  <div class="container-fluid w-100">
    <div class="row g-0">
      <!-- Sidebar -->
      <nav class="sidebar">
        <a href="/admin/dashboard"><i class="bi bi-grid"></i> Dashboard</a>
        <a href="/admin/categories"><i class="bi bi-tag"></i> Categories</a>
        <a href="/admin/products" class="active"><i class="bi bi-box"></i> Products</a>
        <a href="/admin/customers"><i class="bi bi-people"></i> Customers</a>
        <a href="/admin/orders"><i class="bi bi-cart"></i> Orders</a>
        <a href="/admin/coupons"><i class="bi bi-ticket"></i> Coupons</a>
        <a href="/admin/sales-report"><i class="bi bi-bar-chart"></i> Sales Report</a>
        <a href="/admin/logout"><i class="bi bi-box-arrow-right"></i> Sign Out</a>
      </nav>

      <!-- Main Content -->
      <main class="main-content">
        <h3 class="dashboard-title">Edit Product</h3>

      <!-- Product Form -->
      <div class="card add-product-form">
        <div class="card-body p-4">
            <form id="editProductForm" enctype="multipart/form-data">
                <input type="hidden" id="productId" name="productId" value="<%= product._id%>">
                <input type="hidden" id="givenId" name="givenId" value="<%= product.productId%>">
                <div class="mb-4 d-flex gap-3">
                    <div class="w-100">
                        <label for="productName" class="form-label">Product Name</label>
                        <input type="text" class="form-control form-control-sm" id="productName" name="productName" value="<%= product.name %>" placeholder="Enter product name">
                        <div id="nameError" style="font-size: 0.8em; color: #ff0101;"></div>
                    </div>
                    <div class="w-100">
                        <label for="productCategory" class="form-label mb-2">Category</label>
                        <select class="form-select form-select-sm" id="productCategory" name="productCategory">
                            <option hidden>Select category</option>
                            <% category.forEach(category => { %>
                                <option value="<%= category._id %>" 
                                    <%= category._id.toString() === product.category._id.toString() ? 'selected' : '' %>>
                                    <%= category.name %>
                                </option>
                            <% }) %>
                        </select>
                        <div id="categoryError" style="font-size: 0.8em; color: #ff0101;"></div>

                    </div>
                    
                </div>

                <div class="mb-4 d-flex gap-3">
                    <div class="w-100">
                        <label for="brand" class="form-label">Brand</label>
                        <input type="text" class="form-control form-control-sm" id="brand" name="productBrand" value="<%= product.brand %>" placeholder="Enter brand">
                        <div id="brandError" style="font-size: 0.8em; color: #ff0101;"></div>
                    </div>
                    <div class="w-100">
                        <label for="basePrice" class="form-label"> Price</label>
                        <input type="number" id="productPrice" name="productPrice" class="form-control form-control-sm" value="<%= product.price %>" placeholder="Enter price">
                        <div id="priceError" style="font-size: 0.8em; color: #ff0101;"></div>
                    </div>
                    <div class="w-100">
                        <label for="discountPrice" class="form-label">Discount Percentage (%)</label>
                        <input type="number" id="productOffer" name="productOffer" class="form-control form-control-sm" value="<%= product.productOffer || 0 %>" placeholder="Enter discount">
                    </div>
                </div>

                <div class="mb-4 d-flex gap-3">
                    <div class="w-100">
                        <label for="shortDescription" class="form-label"> Description</label>
                        <textarea class="form-control" id= "description" name="description" placeholder="Enter short description"><%= product.description %></textarea>
                        <div id="descriptionError" style="font-size: 0.8em; color: #ff0101;"></div>
                      </div>
                    <div class="w-100">
                      <label for="basePrice" class="form-label"> Stock</label>
                      <input type="number" id="productStock" name="productStock" class="form-control form-control-sm" value="<%= product.stock %>" placeholder="eg.40">
                      <div id="stockError" style="font-size: 0.8em; color: #ff0101;"></div>
                  </div>
                </div>

                <!-- Image Section -->
                <div class="mb-4">
                    <label class="form-label">Product Images</label>
                    <div class="image-upload-row">
                        <% for(let i = 0; i < 4; i++) { %>
                            <div class="image-upload-slot" data-slot="<%= i + 1 %>">
                                <div class="image-upload-dropzone <%= product.images[i] ? 'd-none' : '' %>">
                                    <i class="fa-solid fa-upload"></i>
                                    <p class="mb-0">Add Image</p>
                                    <input type="file" class="d-none" name="productImages[]" accept="image/*">
                                </div>
                                <div class="image-preview <%= product.images[i] ? 'filled' : '' %>">
                                    <% if(product.images[i]) { %>
                                        <img src="<%= product.images[i] %>" alt="Preview" class="img-fluid">
                                        <button type="button" class="remove-image-btn" data-image-url="<%= product.images[i] %>">×</button>
                                    <% } %>
                                </div>
                            </div>
                        <% } %>
                    </div>
                    <div id="imageError" class="text-center" style="font-size: 0.8em; color: #ff0101;"></div>
                </div>
                    <div class="d-flex justify-content-between mt-4">
                        <div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="visibility" id="inlineRadio1"
                                    value="true" <% if (product.visibility=== true || product.visibility==="true"
                                    ) { %> checked <% } %>>
                                    <label class="form-check-label" for="inlineRadio1">Active</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="visibility" id="inlineRadio2"
                                    value="false" <% if (product.visibility== false ||
                                    product.visibility== "false" ) { %> checked <% } %>>
                                    <label class="form-check-label" for="inlineRadio2">Block</label>
                            </div>
                        </div>
                        <div class="d-flex gap-3">
                            <a class="btn cancel-btn" href="/admin/products">Cancel</a>
                            <button type="submit" class="btn btn-primary"><i class="fa fa-check-circle me-2"></i> Update</button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</main>
</div>
</div>

<!-- Cropping Modal -->
<div class="modal fade" id="cropModal" tabindex="-1" aria-labelledby="cropModalLabel" aria-hidden="true">
<div class="modal-dialog modal-lg modal-dialog-centered">
<div class="modal-content border-0 shadow-lg">
    <div class="modal-header bg-primary text-white">
        <h5 class="modal-title fw-bold" id="cropModalLabel">Crop Your Image</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
    </div>
    <div class="modal-body p-4">
        <div class="img-container rounded overflow-hidden bg-light">
            <img id="imageToCrop" src="" alt="Image to crop" class="img-fluid" style="max-height: 500px; object-fit: contain;">
        </div>
    </div>
    <div class="modal-footer border-0">
        <button type="button" class="btn btn-outline-secondary px-4 py-2" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary px-4 py-2 fw-semibold" id="cropButton">Crop & Save</button>
    </div>
</div>
</div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function () {
let cropper;
let currentInput;
let currentPreview;
let removedImages = [];
let newImages = [];

// Form submission
const editProductForm = document.getElementById("editProductForm");
if (editProductForm) {
    editProductForm.addEventListener("submit", async function (event) {
        event.preventDefault();

        clearErrors();

        if (!validateForm()) {
            return;
        }

        const formData = new FormData(this);

        document.querySelectorAll(".remove-image-btn[data-removed='true']").forEach(btn => {
            removedImages.push(btn.getAttribute("data-image-url"));
        });

        if (removedImages.length > 0) {
            formData.append("removedImages", JSON.stringify(removedImages));
        }

        try {
          
            const response = await fetch(`/admin/products/${document.getElementById('productId').value}`, {
                method: "PUT",
                body: formData,
            });

            const result = await response.json();

            if (response.ok) {
                Swal.fire({
                    position: "top-center",
                    icon: "success",
                    text: "Product updated successfully!",
                    showConfirmButton: false,
                    timer: 2000,
                }).then(() => {
                    window.location.href = "/admin/products";
                });
            } else {
              console.log("else error",result)
                Swal.fire({
                    icon: "error",
                    text: result.error || "An unexpected error occurred.",
                });
            }
        } catch (error) {
            console.error("Error:", error);
            Swal.fire({
                icon: "error",
                text: "Something went wrong. Please try again.",
            });
        }
    });
}

// Validation function
function validateForm() {
    let isValid = true;
    const letterRegex =/^[A-Za-z\s]+$/;


    const productName = document.getElementById("productName").value.trim();
    if (!productName || productName.length < 2) {
        showError("nameError", "Product name is required and must be at least 2 characters.");
        isValid = false;
    }else if (!letterRegex.test(productName)){
         showError("nameError" , "Product name can only contain letters and numbers.")
         isValid = false
        }

    const productCategory = document.getElementById("productCategory").value;
    if (!productCategory || productCategory === "Select category") {
      showError("categoryError", "Please select a category.");
        isValid = false;
    }
    const brand = document.getElementById("brand").value.trim();
    if (!brand || brand.length < 2) {
        showError("brandError", "Brand is required and must be at least 2 characters.");
        isValid = false;
    }else if (!letterRegex.test(brand)){
      showError("brandError" , "Brand name can only contain letters and numbers")
      isValid = false
    }
    const price = document.getElementById("productPrice").value;
    if (!price || price <= 0) {
        showError("priceError", "Base price is required and must be greater than 0.");
        isValid = false;
    }
    const discount = document.getElementById("productOffer").value;
    if (discount && (discount < 0 || discount > 100)) {
        showError("priceError", "Discount must be between 0 and 100.");
        isValid = false;
    }
    const description = document.getElementById("description").value.trim();
 if (!description || description.length < 15) {
    showError("descriptionError", "Description must be at least 15 characters.");
    isValid = false;
} else if (!letterRegex.test(description)){
  showError("descriptionError" , "Description can only contain letters and numbers")
  isValid = false
}
    const stock = document.getElementById("productStock").value.trim();
    if (!stock || stock < 0) {
      showError("stockError", "Stock is required and must be 0 or greater.");
        isValid = false;
   }
    const filledSlots = document.querySelectorAll(".image-preview.filled").length;
    const newImageCount = newImages.length;


    const totalImages = filledSlots + (newImages.length - removedImages.length);

    // console.log("Filled slots (current):", filledSlots);
    // console.log("New images:", newImageCount);
    // console.log("Removed images tracked:", removedImages.length);
    // console.log("Total images:", totalImages);

    if (totalImages < 3) {
        showError("imageError", "At least 3 images are required.");
        isValid = false;
    }
    return isValid;
}

// Helper functions for error handling
function showError(elementId, message, container = null) {
    const errorElement = container 
        ? container.querySelector(`.${elementId}`) 
        : document.getElementById(elementId);
    if (errorElement) {
        errorElement.textContent = message;
    }
}

function clearErrors() {
    const errorElements = document.querySelectorAll(".error-message, #nameError, #brandError, #priceError, #descriptionError, #imageError");
    errorElements.forEach(el => el.textContent = "");
}


// Image Upload Functions
function setupImageSlots() {
const slots = document.querySelectorAll(".image-upload-slot");

slots.forEach((slot, index) => {
    const dropzone = slot.querySelector(".image-upload-dropzone");
    const input = slot.querySelector('input[type="file"]');
    const preview = slot.querySelector(".image-preview");
    const existingImage = preview.querySelector("img");

    // Handle existing images
    if (existingImage) {
        slot.classList.add("filled");
        dropzone.classList.add("d-none");

        existingImage.addEventListener("click", () => {
            openCropModal(existingImage.src, (croppedFile) => {
                existingImage.src = URL.createObjectURL(croppedFile);
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(croppedFile);
                input.files = dataTransfer.files;
                // If an existing image is re-cropped, treat it as a new image
                newImages.push(croppedFile);
            });
        });

        const removeBtn = preview.querySelector(".remove-image-btn");
        if (removeBtn) {
            removeBtn.addEventListener("click", () => {
                handleRemoveImage(removeBtn, slot, input, preview);
            });
        }
    }

    // Upload handling
    dropzone.addEventListener("click", () => input.click());

    input.addEventListener("change", () => {
        const file = input.files[0];
        if (file && file.type.startsWith("image/")) {
            openCropModal(URL.createObjectURL(file), (croppedFile) => {
                preview.innerHTML = `
                    <img src="${URL.createObjectURL(croppedFile)}" alt="Preview" class="img-fluid">
                    <button type="button" class="remove-image-btn">×</button>
                `;
                slot.classList.add("filled");
                dropzone.classList.add("d-none");

                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(croppedFile);
                input.files = dataTransfer.files;

                newImages.push(croppedFile);

                const img = preview.querySelector("img");
                img.addEventListener("click", () => {
                    openCropModal(URL.createObjectURL(croppedFile), (newCroppedFile) => {
                        img.src = URL.createObjectURL(newCroppedFile);
                        const newDataTransfer = new DataTransfer();
                        newDataTransfer.items.add(newCroppedFile);
                        input.files = newDataTransfer.files;

                        const index = newImages.indexOf(croppedFile);
                        if (index !== -1) newImages[index] = newCroppedFile;
                        else newImages.push(newCroppedFile);
                      
                    });
                });

                const removeBtn = preview.querySelector(".remove-image-btn");
                removeBtn.addEventListener("click", () => {
                    handleRemoveImage(removeBtn, slot, input, preview);

                    const index = newImages.indexOf(croppedFile);
                    if (index !== -1) newImages.splice(index, 1);
                });
            });
        }
    });
});
}

function handleRemoveImage(removeBtn, slot, input, preview) {
const imageUrl = removeBtn.getAttribute("data-image-url");

if (imageUrl && !removedImages.includes(imageUrl)) {
    removedImages.push(imageUrl);
}

preview.innerHTML = "";
slot.classList.remove("filled");
slot.querySelector(".image-upload-dropzone").classList.remove("d-none");
input.value = "";
}

// Open Crop Modal
function openCropModal(imageSrc, onCropComplete) {
const modalElement = document.getElementById("cropModal");
const image = document.getElementById("imageToCrop");
image.src = imageSrc;

const modal = new bootstrap.Modal(document.getElementById("cropModal"));
modal.show();

if (window.cropper) {
        window.cropper.destroy();
        window.cropper = null;
    }

document.getElementById("cropModal").addEventListener(
    "shown.bs.modal",
    () => {
       
       if(!window.cropper){ 
        cropper = new Cropper(image, {
            aspectRatio: 1,
            viewMode: 1,
            autoCropArea: 1,
            responsive: true,
            dragMode: 'move',
            background: false,
        });
      }
    },
    { once: true }
);
const cropButton = document.getElementById("cropButton");
    cropButton.replaceWith(cropButton.cloneNode(true)); 
    document.getElementById("cropButton").addEventListener(
        "click", () => {
                if (cropper) {
                    const canvas = cropper.getCroppedCanvas({
                        width: Math.min(cropper.getImageData().naturalWidth, 1200),
                        height: Math.min(cropper.getImageData().naturalHeight, 1200),
                    });

                    canvas.toBlob((blob) => {
                        const croppedFile = new File([blob], `cropped-image-${Date.now()}.jpg`, {
                            type: "image/jpeg",
                        });
                        onCropComplete(croppedFile);
                        modal.hide();
                    }, "image/jpeg", 0.95);
                }
            });

modalElement.addEventListener("hidden.bs.modal", function onHidden() {
                if (window.cropper) {
                    window.cropper.destroy();
                    window.cropper = null;
                }
               
                modalElement.removeEventListener("hidden.bs.modal", onHidden);
            },{once:true});
}

// Initialize image slots
const imageContainers = document.querySelectorAll(".image-upload-row");
imageContainers.forEach(container => {
setupImageSlots(container);
});
});



</script>
</body>

</html>