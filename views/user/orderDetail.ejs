<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Order - ElectroMania</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    rel="stylesheet"
  />
  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"
  />
  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
  />
  <link
    href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap"
    rel="stylesheet"
  />
  

  <style>
    /* Custom Styles to match the new design */
    .info-card {
      background-color: #fff;
      border-radius: 8px;
      padding: 20px;
      box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
      height: 100%;
    }

    .order-items-container {
      background-color: #fff;
      border-radius: 8px;
      padding: 15px 20px;
      box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
      margin-bottom: 20px;
    }

    .summary-card {
      background-color: #fff;
      border-radius: 8px;
      padding: 20px;
      box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
      margin-bottom: 20px;
    }

    .item-status {
      /* position: absolute; */
      width: fit-content;
      top: 20px;
      right: 20px;
      padding: 5px 10px;
      border-radius: 15px;
      font-size: 12px;
      background-color: #e8f5e9;
      color: #2e7d32;
    }

    .status-returned,
    .status-return-requested {
      background-color: #e8f5e9;
      color: #2e7d32;
    }

    .status-delivered {
      background-color: #e1f5fe;
      color: #0277bd;
    }

    .status-processing,
    .status-placed {
      background-color: #fff8e1;
      color: #ff8f00;
    }

    .item-quantity {
      font-size: 14px;
      color: #777;
      margin-bottom: 10px;
    }

    .cancel-return-button {
      background-color: #f44336;
      color: white;
    }

    .cancel-return-button:hover {
      background-color: #e53935;
    }

    .return-button {
      background-color: #ff6f9c;
      color: white;
    }

    .return-button:hover {
      background-color: #ff5a8f;
    }

    .cancel-button {
      width: fit-content;
      border-radius: 5px;
      background-color: #f44336;
      color: white;
    }

    .cancel-button:hover {
      background-color: #e53935;
    }

    .product-title {
      font-weight: 600;
      margin-bottom: 5px;
    }

    .product-details {
      font-size: 14px;
      color: #666;
    }

    .status-badge {
      display: inline-block;
      padding: 6px 15px;
      border-radius: 20px;
      font-size: 14px;
      font-weight: 500;
      margin-right: 10px;
    }

    .placed {
      background-color: #ffeed2;
      color: #212529;
    }

    .btn-cancel {
      display: inline-block;
      background-color: #ffc107;
      color: #212529;
      padding: 6px 15px;
      border-radius: 20px;
      text-decoration: none;
      font-size: 14px;
      font-weight: 500;
      margin-left: 5px;
    }

    .price {
      font-weight: 600;
      font-size: 16px;
    }

    .summary-labels {
      font-weight: 500;
      color: #333;
    }

    .summary-values {
      font-weight: 500;
    }

    .discount-value {
      color: #28a745;
    }

    .total-label,
    .total-value {
      font-weight: 700;
      font-size: 16px;
    }

    .back-to-orders {
      display: inline-block;
      padding: 8px 20px;
      border: 1px solid #0d6efd;
      color: #0d6efd;
      border-radius: 25px;
      text-decoration: none;
      font-weight: 500;
      transition: all 0.3s;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.08);
    }

    .back-to-orders:hover {
      background-color: #0d6efd;
      color: white;
    }

    .border-bottom {
      border-bottom: 1px solid #e9ecef !important;
    }

    /* Fix mobile view */
    @media (max-width: 767px) {
      .status-col {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
      }

      .btn-cancel {
        margin-left: 0;
        margin-top: 8px;
      }

      .info-card {
        margin-bottom: 20px;
      }
    }




    /* Improved Order Styles */

/* Status and Actions Container */
.status-and-actions {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 8px;
}

/* Status indicators */
.item-status {
  font-size: 13px;
  font-weight: 500;
  padding: 5px 12px;
  border-radius: 20px;
  display: inline-block;
}

.status-delivered {
  background-color: #e6f7f0;
  color: #2ecc71;
}

.status-returned, .status-cancelled {
  background-color: #f0f0f0;
  color: #7f8c8d;
}

.status-return-requested {
  background-color: #f5e9ff;
  color: #9b59b6;
}

.status-pending {
  background-color: #fff8e5;
  color: #f39c12;
}

.status-processing {
  background-color: #e7f3fe;
  color: #3498db;
}

.status-shipped {
  background-color: #e7f3fe;
  color: #3498db;
  font-weight: 600;
}

/* Button styles */
.action-button {
  border: none;
  border-radius: 6px;
  padding: 6px 14px;
  font-size: 13px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  text-align: center;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  display: inline-block !important;
  visibility: visible !important;
  opacity: 1 !important;
}

.return-button {
  background-color: #f5e9ff;
  color: #9b59b6;
  border: 1px solid #d6b4e7;
}

.return-button:hover {
  background-color: #ead5f5;
}

.cancel-button {
  background-color: #fdeff0;
  color: #e74c3c;
  border: 1px solid #f5c1c7;
}

.cancel-button:hover {
  background-color: #fbe2e4;
}

.cancel-return-button {
  background-color: #f0f0f0;
  color: #7f8c8d;
  border: 1px solid #dcdcdc;
}

.cancel-return-button:hover {
  background-color: #e4e4e4;
}

.item-detail {
  font-size: 12px;
  color: #6c757d;
}

.price {
  font-weight: 600;
  font-size: 15px;
}

/* Make layout more responsive */
@media (max-width: 768px) {
  .status-and-actions {
    margin-top: 10px;
    margin-bottom: 10px;
  }
  
  .price {
    display: inline-block;
    margin-top: 5px;
  }
}
  </style>

  </head>
  <body>

  <%- include ('../partials/header') %>

  <div class="container-fluid px-4 py-4">
    <div class="row">
      <!-- Sidebar -->
      <div class="col-md-3"><%- include('../partials/profileSidebar')%></div>

      <!-- Main Content -->
      <div class="col-md-9">
        <h3 class="fw-bold mb-4">Order Details</h3>

        <div class="row mb-4">
          <!-- Order Summary -->
          <div class="col-md-6 mb-4 mb-md-0">
            <div class="info-card">
              <h5 class="fw-bold mb-3">Order Summary</h5>
              <div class="mb-2">
                <span class="text-muted">Order ID:</span>
                <span class="fw-medium"><%= order.orderId %></span>
              </div>
              <div class="mb-2">
                <span class="text-muted">Order Date:</span>
                <span class="fw-medium"
                  ><%= new Date(order.createdAt).toLocaleString('en-US', {
                  weekday: 'short', day: '2-digit', month: 'short', year:
                  'numeric', hour: '2-digit', minute: '2-digit', hour12: true })
                  %></span
                >
              </div>
              <div class="mb-2">
                <span class="text-muted">Total Amount:</span>
                <span class="fw-medium">â‚¹<%= order.finalAmount %></span>
              </div>
              <div class="mb-2">
                <span class="text-muted">Payment Method:</span>
                <span class="fw-medium"><%= order.paymentMethod %></span>
              </div>
              <a href="/user/download-invoice/<%= order._id %>" class="btn btn-primary" target="_blank">Download Invoice</a>

            </div>
          </div>

          <!-- Shipping Address -->
          <div class="col-md-6">
            <div class="info-card">
              <h5 class="fw-bold mb-3">Shipping Address</h5>
              <div class="mb-2">
                <span class="text-muted">Name:</span>
                <span class="fw-medium"><%= order.shippingAddress.name %></span>
              </div>
              <div class="mb-2">
                <span class="fw-medium"
                  ><%= order.shippingAddress.addressLine1 %><br />
                  <% if (order.shippingAddress.addressLine2) { %> <%=
                  order.shippingAddress.addressLine2 %>, <% } %> <% if
                  (order.shippingAddress.landmark) { %> <%=
                  order.shippingAddress.landmark %>, <% } %> <%=
                  order.shippingAddress.city %>, <%= order.shippingAddress.state
                  %>
                </span>
              </div>
              <div class="mb-2">
                <span class="text-muted"
                  ><%= order.shippingAddress.city %>, <%=
                  order.shippingAddress.zipCode %></span
                >
              </div>
              <div class="mb-2">
                <span class="text-muted">Phone:</span>
                <span class="fw-medium"
                  ><%= order.shippingAddress.phone %></span
                >
              </div>
            </div>
          </div>
        </div>

        <!-- Order Items -->
       <!-- Order Items -->
<div class="order-items-container">
    <% order.orderItems.forEach((item, index) => { 
        const product = item.productId; // This is populated 
    %>
    <div class="row align-items-center py-3 border-bottom">
      <!-- Product Image Column -->
      <div class="col-md-1 col-2">
        <% if(product && product.images && product.images.length > 0) { %>
          <img
            src="<%= product.images[0] %>"
            alt="<%= product.name %>"
            class="img-fluid"
            style="width: 45px; height: 45px; object-fit: contain"
          />
        <% } else { %>
          <div
            class="bg-light text-center"
            style="width: 45px; height: 45px; display: flex; align-items: center; justify-content: center;"
          >
            <i class="fas fa-box"></i>
          </div>
        <% } %>
      </div>
      
      <!-- Product Details Column -->
      <div class="col-md-5 col-10">
        <h6 class="mb-0 product-title"><%= product.name %></h6>
        <div class="text-muted product-details">
          Qty: <%= item.quantity %>
        </div>
      </div>
      
      <!-- Status and Buttons Column - THIS WAS MISSING -->
      <div class="col-md-4 col-12 mt-2 mt-md-0">
        <% if(item) { %>
          <% 
            // Safe date handling
            let returnDeadline = null;
            let canReturn = false;
            
            if (item.deliveryStatus === 'Delivered' && order.deliveredAt) {
              try {
                const deliveredAt = new Date(order.deliveredAt);
                returnDeadline = new Date(deliveredAt);
                returnDeadline.setDate(returnDeadline.getDate() + 30);
                canReturn = new Date() <= returnDeadline;
              } catch (e) {
                console.error("Error calculating return deadline", e);
              }
            }
          %>
          
          <div class="status-and-actions">
            <% if(item.returnStatus === 'Approved') { %>
              <div class="item-status status-returned">Returned</div>
              <div class="item-detail">
                Date of approval: 
                <%= new Date(item.returnedAt).toLocaleString('en-US', { 
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric',
                      hour: '2-digit',
                      minute: '2-digit' 
                  }) %>
              </div>
            
            <% } else if(item.returnStatus === 'Pending') { %>
              <div id="returnRequest" class="item-status status-return-requested">Return Requested</div>
              <button class="action-button cancel-return-button"
                      onclick="cancelReturn('<%= order._id %>', '<%= item._id %>')">
                Cancel Return
              </button>
            
            <% } else if(item.returnStatus === 'Rejected') { %>
              <div class="item-status status-processing">Return Rejected</div>
            
            <% } else if(item.cancelled) { %>
              <div class="item-status status-cancelled">Cancelled</div>
            
            <% } else if(item.deliveryStatus === 'Delivered') { %>
              <div class="item-status status-delivered">Delivered</div>
              
                <button class="action-button return-button"
                        onclick="returnItem('<%= order._id %>', '<%= item._id %>')">
                  Return
                </button>
              
            
            <% } else if(item.deliveryStatus === 'Pending' || 
                        item.deliveryStatus === 'Processing' || 
                        item.deliveryStatus === 'Shipped') { %>
              <div class="item-status status-<%= item.deliveryStatus.toLowerCase() %>">
                <%= item.deliveryStatus %>
              </div>
              <button class="action-button cancel-button"
                      onclick="cancelItem('<%= order._id %>', '<%= item._id %>')">
                Cancel Order
              </button>
            
            <% } else { %>
              <div class="item-status"><%= item.deliveryStatus %></div>
            <% } %>
          </div>
        <% } else { %>
          <p class="text-muted">Product not available</p>
        <% } %>
      </div>
      
      <!-- Price Column -->
      <div class="col-md-2 col-12 mt-2 mt-md-0 text-end">
        <span class="price">â‚¹<%= item.price %></span>
      </div>
    </div>
    <% }) %>
  </div>
        </div>

        <!-- Order Summary -->
        <div class="row mt-4">
          <div class="col-12">
            <div class="summary-card">
              <div class="row">
                <div class="col-md-8 text-md-end text-start summary-labels">
                  <div class="mb-2">Subtotal:</div>
                  <div class="mb-2">Delivery Charges:</div>
                  <div class="mb-2">Coupon Discount:</div>
                  <div class="mt-3 total-label">Total:</div>
                </div>
                <div class="col-md-4 text-end summary-values">
                  <div class="mb-2">â‚¹<%= order.totalAmount %></div>
                  <div class="mb-2">â‚¹0</div>
                  <div class="mb-2 discount-value">
                    -â‚¹<%= order.discount || 0 %>
                  </div>
                  <div class="mt-3 total-value">â‚¹<%= order.finalAmount %></div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="mt-4 text-end">
          <a href="/user/orders" class="back-to-orders">
            <i class="fas fa-arrow-left"></i> Orders
          </a>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
      function returnItem(orderId, itemId) {
        const statusBox = document.getElementById("returnRequest")
            Swal.fire({
                title: 'Return Item',
                text: 'Please select a reason for return',
                input: 'select',
                inputOptions: {
                    'Defective_product': 'Defective Product',
                    'Damaged_product': 'Damaged Product',
                    'Wrong_product_delivered': 'Wrong Product Delivered',
                    'Not_as_described': 'Product Not As Described',
                    'Other': 'Other'
                },
                showCancelButton: true,
                confirmButtonText: 'Submit Return',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                inputValidator: (value) => {
                    return new Promise((resolve) => {
                        if (value) {
                            resolve();
                        } else {
                            resolve('You need to select a reason');
                        }
                    });
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/user/return-item', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            orderId: orderId,
                            itemId : itemId,
                            returnReason: result.value
                        })
                    })
                        .then(response => {
                            if (!response.ok) {
                                console.log(response)
                                return response.json().then(err => {
                                throw new Error(err.message || err.error || 'Something went wrong');
                                });
                            }
                            return response.json();
                        })
                        .then(data => {
                            Swal.fire({
                                icon: 'success',
                                title: data.message || 'Return requested successfully',
                                timer: 1200,
                                showConfirmButton: false,
                            }).then(() => {
                                statusBox.innerText = "Return Requested"
                                statusBox.className= "item-status status-return-requested";
                            });
                        })
                        .catch(error => {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops!',
                                text: error.message || 'Failed to send return request.',
                                timer: 1500,
                                showConfirmButton: false,
                            });
                        });
                }
            });
        }


        function cancelItem(orderId, itemId) {
            Swal.fire({
                title: 'Cancel Item',
                text: 'Please select a reason for cancellation',
                input: 'select',
                inputOptions: {
                    'changed_mind': 'Changed My Mind',
                    'ordered_wrong': 'Ordered Wrong Item',
                    'found_better_price': 'Found Better Price Elsewhere',
                    'other': 'Other'
                },
                showCancelButton: true,
                confirmButtonText: 'Cancel Order',
                cancelButtonText: 'Keep Order',
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                inputValidator: (value) => {
                    return new Promise((resolve) => {
                        if (value) {
                            resolve();
                        } else {
                            resolve('You need to select a reason');
                        }
                    });
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/user/cancel-item`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            orderId,
                            itemId,
                            reason: result.value
                        })
                    })
                        .then(res => {
                            if (res.ok) {
                                Swal.fire('Cancelled!', 'Your item has been cancelled.', 'success')
                                    .then(() => {
                                        location.reload();
                                    });
                            } else {
                                return res.text().then(text => { throw new Error(text); });
                            }
                        })
                        .catch(error => {
                            Swal.fire('Error', error.message || 'Something went wrong', 'error');
                        });
                }
            });
        }


        function cancelReturn(orderId, itemId) {
            Swal.fire({
                title: 'Are you sure?',
                text: 'Do you want to cancel your return request?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, cancel return',
                cancelButtonText: 'No, keep request',
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/user/cancel-return', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ orderId, itemId })
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.message === "Return request cancelled Successfully") {
                                Swal.fire('Cancelled!', data.message, 'success')
                                    .then(() => {
                                        location.reload(); // Reload page to reflect changes
                                    });
                            } else {
                                Swal.fire('Error', data.message || 'Something went wrong.', 'error');
                            }
                        })
                        .catch(err => {
                            console.error(err);
                            Swal.fire('Error', 'Failed to cancel the return request.', 'error');
                        });
                }
            });
        }
  </script>

</body>


